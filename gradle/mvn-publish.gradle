apply plugin: 'maven-publish'
apply plugin: 'signing'
apply from: rootProject.file('gradle/versioning.gradle')

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://s01.oss.sonatype.org/content/repositories/snapshots/"
}

if (!hasProperty("signing.keyId")) {
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_KEY_PASSWORD')
    ext["signing.secretKey"] = System.getenv('SIGNING_SECRET_KEY')
    ext["OSSRH_USERNAME"] = System.getenv('OSSRH_USERNAME')
    ext["OSSRH_PASSWORD"] = System.getenv('OSSRH_PASSWORD')
}

task androidJavadocs(type: Javadoc) {
    dependsOn 'preBuild'
    failOnError = true
    afterEvaluate {
        source = android.sourceSets.main.java.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        android.libraryVariants.all { variant ->
            if (variant.name == 'release') {
                owner.classpath += variant.javaCompileProvider.get().classpath
                owner.classpath += files("$buildDir/generated/source/buildConfig/release")
                owner.classpath += files("$buildDir/intermediates/javac/release/classes")
            }
        }
    }

    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        author = true
        version = true
        use = true
        windowTitle = "$project.name $project.version API"
        docTitle = "$project.name $project.version API"
    }

    doFirst {
        println "Generating Javadocs to: ${destinationDir}"
        println "Source files: ${source.files}"
    }
    
    doLast {
        println "Javadoc generation completed. Check: ${destinationDir}"
    }    
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.source
}

publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId GROUP
            artifactId POM_ARTIFACT_ID
            version getVersionName()

            // Two artifacts, the `aar` and the sources
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar
            artifact androidJavadocsJar

            // Self-explanatory metadata for the most part
            pom {
                name = POM_NAME
                packaging = POM_PACKAGING
                description = POM_DESCRIPTION
                url = POM_URL

                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                        distribution = POM_LICENCE_DIST
                    }
                }

                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                    }
                }

                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }
                // A slight fix so that the generated POM will include any transitive dependencies
                // that the library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"

            // You only need this if you want to publish snapshots, otherwise just set the URL
            // to the release repo directly
            url = version.endsWith('SNAPSHOT') ? getSnapshotRepositoryUrl() : getReleaseRepositoryUrl()

            // The username and password we've fetched earlier
            if (!getUrl().toString().startsWith("file:/")) {
                credentials {
                    username findProperty("OSSRH_USERNAME") ?: System.getenv('OSSRH_USERNAME')
                    password findProperty("OSSRH_PASSWORD") ?: System.getenv("OSSRH_PASSWORD")
                }
            }
        }
    }
}

signing {
    if (findProperty("signing.keyId") || System.getenv("SIGNING_KEY_ID")) {
        useInMemoryPgpKeys(
            findProperty("signing.keyId"),
            findProperty("signing.secretKey"),
            findProperty("signing.password")
        )
        sign publishing.publications.release
    }
}

afterEvaluate {
    androidJavadocs.classpath += project.android.libraryVariants.toList().first().javaCompile.classpath

    tasks.withType(PublishToMavenRepository) {
        dependsOn 'build', 'bundleReleaseAar'
    }
    
    tasks.withType(PublishToMavenLocal) {
        dependsOn 'build', 'bundleReleaseAar'
    }
}
