apply plugin: 'tech.medivh.plugin.publisher'
apply plugin: 'signing'
apply from: rootProject.file('gradle/versioning.gradle')


medivhPublisher {
    groupId = GROUP
    artifactId = POM_ARTIFACT_ID
    version = getVersionName()

    pom {
        name = POM_NAME
        packaging = POM_PACKAGING
        description = POM_DESCRIPTION
        url = POM_URL

        licenses {
            license {
                name = POM_LICENCE_NAME
                url = POM_LICENCE_URL
                distribution = POM_LICENCE_DIST
            }
        }

        developers {
            developer {
                id = POM_DEVELOPER_ID
                name = POM_DEVELOPER_NAME
                email = POM_DEVELOPER_EMAIL
            }
        }

        scm {
            url = POM_SCM_URL
            connection = POM_SCM_CONNECTION
            developerConnection = POM_SCM_DEV_CONNECTION
        }
    }
}

// Signing expects a base 64 encoded version of an ascii armored PGP key
// gpg --armor --export-secret-keys LAST-8-CHARS-OF-KEY-ID > privkey.sec.asc
// cat privkey.sec.asc | base64
signing {
    def signingKeyB64 = System.getenv("SIGNING_KEY_B64")
    def signingPassword = System.getenv("SIGNING_PASSWORD")
    def signingKey = signingKeyB64 ? new String(Base64.decoder.decode(signingKeyB64)) : null

    if (signingKey) {
        logger.info('Signing key supplied! Using in memory PgpKeys')
        // Only for debugging!!
//        logger.info('**********************************')
//        logger.lifecycle("SigningKeyB64 ${signingKeyB64.take(20)}")
//        logger.lifecycle("SigningKey ${signingKey.take(50)}")
//        logger.lifecycle("SigningPassword ${signingPassword}")
//        logger.info('**********************************')

        useInMemoryPgpKeys(signingKey, signingPassword)
    } else {
        logger.warn('Signing disabled: no SIGNING_KEY_B64 provided.')
    }
}

