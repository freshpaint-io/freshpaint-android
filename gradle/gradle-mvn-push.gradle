/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'

version = VERSION_NAME
group = GROUP

afterEvaluate { project ->

  if (project.getPlugins().hasPlugin('com.android.application') ||
          project.getPlugins().hasPlugin('com.android.library')) {

    task androidJavadocs(type: Javadoc) {
      source = android.sourceSets.main.java.source
      classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

      // Add library variant classpath for newer AGP compatibility
      try {
        classpath += project.android.libraryVariants.toList().first().javaCompileProvider.get().classpath
      } catch (Exception e) {
        // Fallback for older AGP versions or different configurations
        try {
          classpath += project.android.libraryVariants.toList().first().javaCompile.classpath
        } catch (Exception fallbackException) {
          logger.warn("Could not add library variant classpath: ${fallbackException.message}")
        }
      }
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
      archiveClassifier.set('javadoc')  // Updated from classifier
      from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
      archiveClassifier.set('sources')  // Updated from classifier
      from android.sourceSets.main.java.source
    }

  } else {
    task sourcesJar(type: Jar, dependsOn: classes) {
      archiveClassifier.set('sources')  // Updated from classifier
      from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
      archiveClassifier.set('javadoc')  // Updated from classifier
      from javadoc.destinationDir
    }
  }

  // Configure signing - updated for maven-publish
  task install(dependsOn: 'publishToMavenLocal') {
    doLast {
      logger.lifecycle("âœ… Installed ${project.name} ${VERSION_NAME} to local Maven repository")
    }
  }
}

// Enhanced Javadoc configuration for Java 8+ compatibility
if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc).configureEach {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}